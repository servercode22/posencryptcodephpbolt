<?php
bolt_decrypt( __FILE__ , '59Jcmc'); return 0;
##!!!##