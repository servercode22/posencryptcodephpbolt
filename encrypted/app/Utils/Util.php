<?php
bolt_decrypt( __FILE__ , 'DRCYlY'); return 0;
##!!!##